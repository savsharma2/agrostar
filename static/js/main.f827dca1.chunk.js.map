{"version":3,"sources":["apiClient.js","apiMiddleware.js","agrostar/reducer.js","agrostar/action.js","rootReducer.js","agrostar/components/tree/index.js","agrostar/index.js","serviceWorker.js","index.js","store.js","agrostar/components/tree/style.module.scss"],"names":["methods","ApiClient","req","res","forEach","method","path","fetch","apiMiddleware","client","dispatch","getState","next","action","promise","types","Error","REQUEST","SUCCESS","FAILURE","type","actionPromise","then","result","ok","json","responseData","error","catch","INITIAL_STATE","isLoading","isLoaded","findLeaf","tree","id","source","children","leaf","Array","length","i","markAll","checked","child","markDependecies","markTree","getAgroInfo","state","agroInfo","expanded","data","undefined","nextState","produce","draftState","combineReducers","Expand","src","alt","Collapse","Tree","leaves","onToggle","onExpand","onClick","onChange","bind","className","styles","collapsed","map","key","defaultProps","expandLeaf","connect","fetchAgroInfo","get","toggleLeaf","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","initialState","clientMiddleware","createStore","rootReducer","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","configureStore","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message","module","exports"],"mappings":"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","file":"static/js/main.f827dca1.chunk.js","sourcesContent":["\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\nexport default class ApiClient {\n    constructor(req, res) {\n        methods.forEach(method => {\n            this[method] = (path) => fetch(path)\n        });\n    }\n};","export const apiMiddleware = client => ({ dispatch, getState }) => next => (action) => {\n    if (typeof action === 'function') {\n        return action(dispatch, getState);\n    }\n\n    const { promise, types } = action;\n\n    if (!promise) {\n        return next(action);\n    }\n\n    if (!types) {\n        throw new Error('[ApiClient]: Required property `types` missing');\n    }\n\n    const [REQUEST, SUCCESS, FAILURE] = types;\n\n    next({ type: REQUEST });\n\n    const actionPromise = promise(client, getState);\n\n    actionPromise.then(\n        (result) => {\n            if (result.ok) {\n                result.json().then(({responseData}) => {\n                    next({ result: responseData, type: SUCCESS });\n                })\n            }\n        },\n        (error) => {\n            next({ error, type: FAILURE });\n        },\n    ).catch((error) => {\n        next({ error, type: FAILURE });\n    });\n\n    return actionPromise;\n};","import { FETCH_AGRO_INFO, FETCH_AGRO_INFO_SUCCESS, FETCH_AGRO_INFO_FAIL, TOGGLE_LEAF, EXPAND_LEAF } from './action';\n\nimport produce from \"immer\"\n\nconst INITIAL_STATE = {\n    isLoading: false,\n    isLoaded: false\n};\n\nconst findLeaf = (tree, id) => {\n    const { source, children } = tree;\n    let leaf = null\n    if (source === id) {\n        leaf = tree;\n    } else if (children instanceof Array && children.length > 0) {\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            let res = findLeaf(child, id);\n            // debugger;\n            if (res) {\n                leaf = res;\n                // debugger;\n                break;\n            }\n        }\n    }\n    return leaf;\n};\n\nconst markAll = (tree, checked) => {\n    tree.checked = checked;\n    if (tree.children instanceof Array) {\n        tree.children.forEach(child => {\n            markAll(child, checked);\n        });\n    }\n};\n\nconst markDependecies = (tree) => {\n    let markTree = true;\n    if (tree.children instanceof Array && tree.children.length > 0) {\n        markTree = true;\n        for (let i = 0; i < tree.children.length; i++) {\n            const child = markDependecies(tree.children[i]);\n            if (!child.checked) {\n                markTree = false;\n            }\n        }\n        tree.checked = markTree;\n    }\n\n    return tree;\n}\n\nconst agroInfo = (state = INITIAL_STATE, { type, result, id, expanded, error }) => {\n    if (type === FETCH_AGRO_INFO) {\n        state = { ...state, isLoading: true, isLoaded: false };\n    } else if (type === FETCH_AGRO_INFO_SUCCESS) {\n        state = { ...state, isLoading: false, isLoaded: true, data: result };\n    } else if (type === FETCH_AGRO_INFO_FAIL) {\n        state = { ...state, isLoading: false, isLoaded: false, data: undefined, error };\n    } else if (type === TOGGLE_LEAF) {\n\n        const nextState = produce(state, draftState => {\n            const leaf = findLeaf(draftState.data, id);\n            markAll(leaf, leaf.checked === true ? false : true);\n            markDependecies(draftState.data);\n        });\n        return nextState;\n    } else if (type === EXPAND_LEAF) {\n        const nextState = produce(state, draftState => {\n            const leaf = findLeaf(draftState.data, id);\n            leaf.expanded = expanded;\n        });\n        return nextState;\n    }\n    // For now, don't handle any actions\n    // and just return the state given to us.\n    return state\n};\n\nexport const getAgroInfo = (state) => state.agroInfo;\n\n\n\nexport default agroInfo;\n","export const FETCH_AGRO_INFO = 'FETCH_AGRO_INFO';\nexport const FETCH_AGRO_INFO_SUCCESS = 'FETCH_AGRO_INFO_SUCCESS';\nexport const FETCH_AGRO_INFO_FAIL = 'FETCH_AGRO_INFO_FAIL';\n\nexport const TOGGLE_LEAF = 'TOGGLE_LEAF';\nexport const EXPAND_LEAF = 'EXPAND_LEAF';\n\nexport const fetchAgroInfo = () => ({\n    types: [FETCH_AGRO_INFO, FETCH_AGRO_INFO_SUCCESS, FETCH_AGRO_INFO_FAIL],\n    promise: client => {\n\n        return client.get(`http://www.mocky.io/v2/5cff79fc3200007100eac68f`);\n    }\n});\n\nexport const toggleLeaf = (id) => {\n    return {\n        type: TOGGLE_LEAF,\n        id\n    }\n};\n\nexport const expandLeaf = (id, expanded) => {\n    // debugger;\n    return {\n        type: EXPAND_LEAF,\n        id, expanded\n    }\n};","import { combineReducers } from 'redux';\nimport  agroInfo  from './agrostar/reducer';\n\nexport default combineReducers({\n    agroInfo\n});\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './style.module.scss';\n\n\nconst Expand = () => {\n    return <img src='./expand.png' alt='Expand'></img>;\n};\n\nconst Collapse = () => {\n    return <img src='./collapse.png' alt='Collapse'></img>;\n};\n\nconst Tree = ({ source, leaves, onToggle, expanded, checked, onExpand }) => {\n    return <div>\n\n        {leaves && leaves.length > 0 && <span onClick={() => { onExpand(source, !expanded) }}> {expanded ? <Collapse /> : <Expand />}  </span>}\n        <input type='checkbox' checked={checked} onChange={onToggle.bind(null, source)}></input>\n        <span>{source} </span>\n        {leaves && <div className={expanded ? `${styles.children} ${styles.expanded}` : `${styles.children} ${styles.collapsed}`}>\n            {leaves.map((leaf) => {\n                return <Tree key={leaf.source} source={leaf.source} onExpand={onExpand} expanded={leaf.expanded} checked={leaf.checked} leaves={leaf.children} onToggle={onToggle}>\n                </Tree>\n            })}\n        </div>}\n    </div>;\n};\n\nTree.propTypes = {\n    source: PropTypes.string.isRequired,\n    leaves: PropTypes.arrayOf(PropTypes.shape(PropTypes.object)),\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func,\n    expandLeaf: PropTypes.func\n};\n\nTree.defaultProps = {\n    expandLeaf: () => { },\n    onToggle: () => { },\n    checked: false,\n    expanded: true\n}\n\nexport default Tree;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { fetchAgroInfo, toggleLeaf, expandLeaf } from './action';\nimport { getAgroInfo } from './reducer';\n\nimport Tree from './components/tree';\n\nconst AgroTree = ({ fetchAgroInfo, expandLeaf, toggleLeaf, agroInfo: { isLoaded, data } }) => {\n\n    useEffect(() => {\n        fetchAgroInfo();\n    }, []);\n    // debugger;\n    return isLoaded ? <Tree source={data.source} expanded={data.expanded} onExpand={expandLeaf} onToggle={toggleLeaf} checked={data.checked} leaves={data.children} ></Tree> : <div> Loading </div>;\n};\n\nexport default connect(\n    state => {\n        return {\n            agroInfo: getAgroInfo(state)\n        };\n    },\n    { fetchAgroInfo, toggleLeaf, expandLeaf }\n)(AgroTree);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nimport AgroTree from './agrostar'\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <AgroTree />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport ApiClient from './apiClient';\nimport { apiMiddleware } from './apiMiddleware';\n\n\nimport rootReducer from './rootReducer';\n\nexport default function configureStore(initialState = {}) {\n    const client = new ApiClient();\n    const clientMiddleware = apiMiddleware(client);\n\n    return createStore(\n        rootReducer,\n        initialState,\n        compose(\n            applyMiddleware(...[clientMiddleware, thunk]),\n            window.__REDUX_DEVTOOLS_EXTENSION__ &&\n            window.__REDUX_DEVTOOLS_EXTENSION__()\n        )\n    );\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"children\":\"style_children__2rIC0\",\"expanded\":\"style_expanded__3zgQ6\",\"collapsed\":\"style_collapsed__3H9kM\",\"tree\":\"style_tree__1B0T5\"};"],"sourceRoot":""}